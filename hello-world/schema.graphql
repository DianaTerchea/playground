### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Admin {
  email: String!
  id: Int!
  name: String
}

type AuthPayload {
  token: String
  user: Admin
}

type Company {
  id: Int!
  name: String!
  teams: [Team!]!
}

"""Date custom scalar type"""
scalar Date

type Employee {
  age: Int!
  createdAt: Date!
  id: Int!
  name: String!
  role: String!
  team: Team
  updatedAt: Date!
}

input EmployeeCreateInput {
  age: Int!
  name: String!
  role: Roles!
  teamId: Int!
}

type Mutation {
  addCompany(name: String!): Company
  addEmployee(data: EmployeeCreateInput!): Employee!
  addTeam(companyId: Int!, name: String!): Team
  changeEmployeeRole(id: Int!, newRole: Roles!): Employee
  deleteEmployee(id: Int!): Employee
  login(email: String!, password: String!): AuthPayload
  register(email: String!, name: String, password: String!): AuthPayload
}

type Query {
  getAllCompanies: [Company]
  getAllEmployees: [Employee]
  getCompanyById(id: Int!): Company
  getCompanyTeams(companyId: Int!): [Team]
  getEmployeeById(id: Int!): Employee
  getTeamMembers(id: Int!): [Employee]
  getTeams: [Team]
}

enum Roles {
  developer
  manager
  tester
}

type Subscription {
  deleteEmployee(teamId: Int!): Employee
  newEmployee(teamId: Int!): Employee
}

type Team {
  id: Int!
  members: [Employee!]!
  name: String!
}
